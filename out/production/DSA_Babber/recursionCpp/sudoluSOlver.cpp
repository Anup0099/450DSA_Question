#include <bits/stdc++.h> 
using namespace std; 
//sudoku solver is  a backtracking algorithm. It is used to solve a 9*9 sudoku puzzle. The puzzle is represented as a 2D array of 9*9 cells. Each cell can contain a number from 1 to 9. The objective is to fill the puzzle with numbers in such a way that each row, column, and 3*3 sub-grid contains all the numbers from 1 to 9. The sudoku puzzle can be solved if it is solvable. If it is not solvable, then the puzzle is unsolvable. The sudoku puzzle is solvable if it can be filled with numbers from 1 to 9 such that each row, column, and 3*3 sub-grid contains all the numbers from 1 to 9. The sudoku puzzle is unsolvable if it cannot be filled with numbers from 1 to 9 such that each row, column, and 3*3 sub-grid contains all the numbers from 1 to 9. The sudoku puzzle is solvable if it can be filled with numbers from 1 to 9 such that each row, column, and 3*3 sub-grid contains all the numbers from 1 to 9. The sudoku puzzle is unsolvable if it cannot be filled with numbers from 1 to 9 such that each row, column, and 3*3 sub-grid contains all the numbers from 1 to 9. The sudoku puzzle is solvable if it can be filled with numbers from 1 to 9 such that each row, column, and 3*3 sub-grid contains all the numbers from 1 to 9. The sudoku puzzle is unsolvable if it cannot be filled with numbers from 1 to 9 such that each row, column, and 3*3 sub-grid contains all the numbers from 1 to 9. The sudoku puzzle is solvable if it can be filled with numbers from 1 to 9 such that each row, column, and 3*3 sub-grid contains all the numbers from 1 to 9. The sudoku puzzle is unsolvable if it cannot be filled with numbers from 1 to 9 such that each row, column, and 3*3 sub-grid contains all the numbers from 1 to 9. The sudoku puzzle is solvable if it can be filled with numbers from 1 to 9 such that each row, column, and 3*3 sub-grid contains all

int main() {
    

} 